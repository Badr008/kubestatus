apiVersion: v1
kind: Namespace
metadata:
  name: kubestatus

---

kind: ConfigMap 
apiVersion: v1 
metadata:
  name: kubestatus-config
  namespace: kubestatus
data:
  services: |
    Web Application=web-service.default;
# format:  LABEL=SERVICE.NAMESPACE:HEALTH_CHECK_ENDPOINT;
# example: Web_Server=web-server.default or API_Server=api-service.staging:/healthz;
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubestatus-deployment
  namespace: kubestatus
spec:
  selector:
    matchLabels:
      app: kubestatus
  template:
    metadata:
      labels:
        app: kubestatus
    spec:
      containers:
      - name: kubestatus
        image: soubai/kubestatus
        resources:
          limits:
            memory: "64Mi"
            cpu: "10m"
        ports:
        - containerPort: 8080
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 5
        envFrom:
          - configMapRef:
              name: kubestatus-config

---

apiVersion: v1
kind: Service
metadata:
  namespace: kubestatus
  name: kubestatus-service
spec:
  selector:
    app: kubestatus
  ports:
  - port: 8080

---
# If you  need to add kubestatus to your Ingress consider doing something like 

# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: minimal-ingress
#   annotations:
#     nginx.ingress.kubernetes.io/rewrite-target: /
# spec:
#   ingressClassName: nginx-example
#   rules:
#   - http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: kubestatus-service
#             port:
#               number: 8080